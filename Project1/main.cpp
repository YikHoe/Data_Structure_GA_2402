// Project1.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include "LinkedList.h"
#include "FileHandler.h"

using namespace std;

int calculateSentimentScore(int positiveCount, int negativeCount) {
    int N = positiveCount + negativeCount;
    int rawScore = positiveCount - negativeCount;
    int minRawScore = -N;
    int maxRawScore = N;

    if (maxRawScore == minRawScore) return 3;

    float normalizedScore = float(rawScore - minRawScore) / (maxRawScore - minRawScore);
    return round(1.0f + (4.0f * normalizedScore));
}

void analyzeScore(int sentimentScore, int ratingGiven) {
    string result = (sentimentScore != ratingGiven) ? "does not match" : "matches";
    string consistency = (sentimentScore != ratingGiven) ? "inconsistency" : "consistency";

    cout << "User's subjective evaluation " << result << " the sentiment score provided by the analysis. "
        << "There is a " << consistency << " between the sentiment score generated by the analysis and the user's evaluation of the sentiment."
        << endl << endl;
}


int main()
{
	class FileHandler fileHandler;

    LinkedList reviewsList, positiveList, negativeList;
    fileHandler.readReviewsFromCSV("tripadvisor_hotel_reviews.csv", reviewsList);
	fileHandler.readWordFromText("positive-words.txt", positiveList);
	fileHandler.readWordFromText("negative-words.txt", negativeList);
    LinkedList wordList;
    LinkedList foundPositiveList;
    LinkedList foundNegativeList;
    int positiveCount = 0;
    int negativeCount = 0;
    int totalPostiveCount = 0;
    int totalNegativeCount = 0;
    int reviewCount = 1;
    int choice;


    Node* currentReviewNode = reviewsList.getHead();
    cout << "1: Summary, 2: Each Review";
    cin >> choice;
    if (choice == 1) {
        //for all review
        while (currentReviewNode != nullptr) {
            wordList.tokenize(currentReviewNode->review);
            currentReviewNode = currentReviewNode->nextAddress;
            reviewCount++;
        }


        WordNode* currentWord = foundList.getWordHead();
        while (currentWord != nullptr) {
            if (positiveList.contains(currentWord->word)) {
                foundPositiveList.insertBack(currentWord->word);
            }
            else if (negativeList.contains(currentWord->word)) {
                foundNegativeList.insertBack(currentWord->word);
            }
            currentWord = currentWord->nextAddress;
        }
        totalPostiveCount = foundPositiveList.getSize();
        totalNegativeCount = foundNegativeList.getSize();

        foundList.removeDuplicates();


        cout << "Total Review = " << reviewCount << endl;
        cout << "Total Counts of positive words = "<< totalPostiveCount << endl;
        cout << "Total Counts of negative words = " << totalNegativeCount << endl;
        foundList.displayList();



    }
    else {

        //for each review
        while (currentReviewNode != nullptr) {
            cout << "Reviews " << reviewCount << ": " << currentReviewNode->review << endl << endl;
            wordList.tokenize(currentReviewNode->review);
            LinkedList foundList = reviewsList.search(wordList, positiveList, negativeList);
            foundList.sortByPosNeg(positiveList, negativeList);
            WordNode* currentWord = foundList.getWordHead();

            while (currentWord != nullptr) {
                if (positiveList.contains(currentWord->word)) {
                    foundPositiveList.insertBack(currentWord->word);
                }
                else if (negativeList.contains(currentWord->word)) {
                    foundNegativeList.insertBack(currentWord->word);
                }
                currentWord = currentWord->nextAddress;
            }

            positiveCount = foundPositiveList.getSize();
            cout << positiveCount << " Positive words found:" << endl;
            foundPositiveList.displayList();
            negativeCount = foundNegativeList.getSize();
            cout << negativeCount << " Negative words found:" << endl;
            foundNegativeList.displayList();

            totalPostiveCount += positiveCount;
            totalNegativeCount += negativeCount;

            int sentimentScore = calculateSentimentScore(positiveCount, negativeCount);

            cout << "Sentiment Score£¨1-5£©= " << sentimentScore << endl;
            cout << "Rating given by User =  " << currentReviewNode->rating << endl;
            analyzeScore(sentimentScore, stoi(currentReviewNode->rating));

            foundPositiveList = LinkedList();
            foundNegativeList = LinkedList();
            wordList = LinkedList();
            reviewCount++;
            currentReviewNode = currentReviewNode->nextAddress;

        }


        cout << "Total Review = " << reviewCount-1 << endl;
        cout << "Total Counts of positive words = " << totalPostiveCount << endl;
        cout << "Total Counts of negative words = " << totalNegativeCount << endl;
    }

    


}

